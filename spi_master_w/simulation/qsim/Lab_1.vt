// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2019 11:45:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab_1_vlg_sample_tst(
	clk,
	data,
	sampler_tx
);
input  clk;
input [7:0] data;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab_1_vlg_check_tst (
	cs,
	mosi,
	sck,
	sampler_rx
);
input  cs;
input  mosi;
input  sck;
input sampler_rx;

reg  cs_expected;
reg  mosi_expected;
reg  sck_expected;

reg  cs_prev;
reg  mosi_prev;
reg  sck_prev;

reg  cs_expected_prev;
reg  mosi_expected_prev;
reg  sck_expected_prev;

reg  last_cs_exp;
reg  last_mosi_exp;
reg  last_sck_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	cs_prev = cs;
	mosi_prev = mosi;
	sck_prev = sck;
end

// update expected /o prevs

always @(trigger)
begin
	cs_expected_prev = cs_expected;
	mosi_expected_prev = mosi_expected;
	sck_expected_prev = sck_expected;
end



// expected cs
initial
begin
	cs_expected = 1'bX;
	cs_expected = #999000 1'b0;
end 

// expected mosi
initial
begin
	mosi_expected = 1'bX;
	mosi_expected = #999000 1'b0;
end 

// expected sck
initial
begin
	sck_expected = 1'bX;
	sck_expected = #999000 1'b0;
end 
// generate trigger
always @(cs_expected or cs or mosi_expected or mosi or sck_expected or sck)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cs = %b | expected mosi = %b | expected sck = %b | ",cs_expected_prev,mosi_expected_prev,sck_expected_prev);
	$display("| real cs = %b | real mosi = %b | real sck = %b | ",cs_prev,mosi_prev,sck_prev);
`endif
	if (
		( cs_expected_prev !== 1'bx ) && ( cs_prev !== cs_expected_prev )
		&& ((cs_expected_prev !== last_cs_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cs_exp = cs_expected_prev;
	end
	if (
		( mosi_expected_prev !== 1'bx ) && ( mosi_prev !== mosi_expected_prev )
		&& ((mosi_expected_prev !== last_mosi_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mosi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mosi_expected_prev);
		$display ("     Real value = %b", mosi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mosi_exp = mosi_expected_prev;
	end
	if (
		( sck_expected_prev !== 1'bx ) && ( sck_prev !== sck_expected_prev )
		&& ((sck_expected_prev !== last_sck_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sck :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sck_expected_prev);
		$display ("     Real value = %b", sck_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sck_exp = sck_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data;
// wires                                               
wire cs;
wire mosi;
wire sck;

wire sampler;                             

// assign statements (if any)                          
Lab_1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.cs(cs),
	.data(data),
	.mosi(mosi),
	.sck(sck)
);

// clk
always
begin
	clk = 1'b0;
	clk = #12500 1'b1;
	#12500;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b1;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b1;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

Lab_1_vlg_sample_tst tb_sample (
	.clk(clk),
	.data(data),
	.sampler_tx(sampler)
);

Lab_1_vlg_check_tst tb_out(
	.cs(cs),
	.mosi(mosi),
	.sck(sck),
	.sampler_rx(sampler)
);
endmodule

